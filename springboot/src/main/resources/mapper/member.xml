<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.ssafy.user.model.mapper.UserMapper">

	<resultMap type="userDto" id="user">
		<result column="user_id" property="userId"/>
		<result column="user_name" property="userName"/>
		<result column="user_password" property="userPwd"/>
		<result column="email_id" property="emailId"/>
		<result column="email_domain" property="emailDomain"/>
		<result column="join_date" property="joinDate"/>
		<result column="type" property="type"/>
		<result column="is_admin" property="isAdmin"/>
	</resultMap>

	<select id="login" parameterType="userDto" resultMap="user">
		select *
		from users
		where user_id = #{userId} and user_password = #{userPwd}
	</select>
	
	<select id="userInfo" parameterType="string" resultMap="user">
		select *
		from users
		where user_id = #{userId}
	</select>
	
	<select id="getRefreshToken" parameterType="string" resultType="string">
		select token
		from users
		where user_id = #{userId}
	</select>
	
	<update id="saveRefreshToken" parameterType="map">
		update users
		set token = #{token}
		where user_id = #{userId}
	</update>
	
	<update id="deleteRefreshToken" parameterType="map">
		update users
		set token = #{token, jdbcType=VARCHAR}
		where user_id = #{userId}
	</update>

<!-- 	<select id="idCheck" parameterType="String" resultType="int">
		select count(user_id)
		from users
		where user_id = #{userId}
	</select> -->


	<insert id="joinUser" parameterType="UserDto">
		insert into users (user_id, user_name, user_password, email_id, email_domain, type)
		value (#{userId}, #{userName}, #{userPwd}, #{emailId}, #{emailDomain}, #{type})
	</insert>
	
<!-- <select id="loginUser" parameterType="string" resultMap="user">
		select *
		from users
		where user_id = #{userId}
	</select>
	
	<select id="getUserInfo" parameterType="string" resultMap="user">
		select user_id, user_name, email_id, email_domain, join_date, plan_list_id, friends_id, type
		from users
		where user_id = #{userId}
	</select> -->
	
	<update id="modifyUserInfo" parameterType="UserDto">
		update users
		set user_id = #{userId}, user_password = #{userPwd}, user_name = #{userName}, email_id = #{emailId}, email_domain = #{emailDomain}, type = #{type}
		where user_id = #{userOriginId}
	</update>
	
	
	<update id="deleteNotice" parameterType="string">
		update notice
		set user_id = '알수없음'
		where user_id = #{userId}
	</update>
	<update id="deleteBoard" parameterType="string">
		update boards
		set user_id = '알수없음'
		where user_id = #{userId}
	</update>
	
	<delete id="deleteUser" parameterType="string">
		delete from users
		where user_id = #{userId}
	</delete>
	
	<select id="findPwd" parameterType="string" resultType="string">
		select user_password
		from users
		where user_id = #{userId}
	</select>



	<!-- ADMIN -->
	<!-- <select id="listMember" resultMap="member">
		select user_name, user_id, user_password, email_id, email_domain, join_date
		from members
		order by join_date
	</select>
	
	<select id="getMember" parameterType="string" resultMap="member">
		select user_id, user_name, user_password, email_id, email_domain, join_date
		from members
		where user_id = #{userId}
	</select>
	
	<update id="updateMember" parameterType="memberDto">
		update members
		<trim prefix="set" suffixOverrides=",">
			<if test="userPwd != null">user_password = #{userPwd},</if>
			<if test="emailId != null">email_id = #{emailId},</if>
			<if test="emailDomain != null">email_domain = #{emailDomain},</if>
		</trim>
		where user_id = #{userId}
	</update>
	
	<delete id="deleteMember" parameterType="String">
		delete from members
		where user_id = #{userId}
	</delete> -->

</mapper>